#Использовать asserts
#Использовать reflector

Функция ПолучитьКомпонент(КонтекстПриложения, ИмяКомпонента) Экспорт

	ОпределениеКомпонента = КонтекстПриложения.ПолучитьОпределениеКомпонента(ИмяКомпонента);

	Ожидаем.Что(
		ОпределениеКомпонента, 
		СтрШаблон("Не удалось получить определение компонента по имени компонента %1", ИмяКомпонента)
	).Не_().Равно(Неопределено);

	ТипКомпонента = ОпределениеКомпонента.ТипКомпонента();

	// todo: закэшировать в определении компонента
	РефлекторОбъекта = Новый РефлекторОбъекта(ТипКомпонента);

	Методы = РефлекторОбъекта.ПолучитьТаблицуМетодов("Компонент");
	Ожидаем.Что(Методы.Количество(), "Компонент должен иметь ровно один метод с аннотацией &Компонент").Равно(1);

	Конструктор = Методы[0];
	ПередаваемыеПараметрыКонструктора = Новый Массив;
	Для Каждого ПараметрКонструктора Из Конструктор.Параметры Цикл

		АннотацииПараметра = ПараметрКонструктора.Аннотации;
		АннотацииЗависимость = АннотацииПараметра.НайтиСтроки(Новый Структура("Имя", "зависимость"));
		
		Ожидаем.Что(АннотацииЗависимость.Количество()).Равно(1);

		АннотацияЗависимость = АннотацииЗависимость[0];

		ПараметрыАннотации = АннотацияЗависимость.Параметры;
		Ожидаем.Что(ПараметрыАннотации.Количество()).Равно(1);

		ИмяПараметра = ПараметрыАннотации[0].Значение;

		Зависимость = КонтекстПриложения.ПолучитьКомпонент(ИмяПараметра);
		
		ПередаваемыеПараметрыКонструктора.Добавить(Зависимость);
	КонецЦикла;

	ИнстансКомпонента = Новый(ТипКомпонента, ПередаваемыеПараметрыКонструктора);
	
	Возврат ИнстансКомпонента;
	
КонецФункции
